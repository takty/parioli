{
  "version": 3,
  "sources": ["../src/hash.ts", "../src/dice.ts", "../parioly.ts"],
  "sourcesContent": ["/**\n * Simple Hash\n *\n * @author Takuto Yanagida\n * @version 2024-08-23\n */\n\n/**\n * Computes a hash value for a string using the DJB2 hash function.\n * @param str The string for which the hash value is to be calculated.\n * @returns The computed hash value as an integer.\n */\nexport function hash(str: string): number {\n\tlet hash = 5381; // Initial value, commonly used prime number in DJB2\n\n\tfor (let i = 0; i < str.length; i++) {\n\t\thash = (hash * 33) ^ str.charCodeAt(i);\n\t}\n\n\t// Mask to fit the hash value into a 32-bit unsigned integer\n\treturn hash >>> 0; // Return as a 32-bit unsigned integer\n}\n", "/**\n * Dice\n * @author Takuto Yanagida\n * @version 2024-08-23\n */\n\nexport class Dice {\n\n\tprotected r: () => number;\n\n\t/**\n\t * Make a dice\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tthis.r = Math.random;\n\t}\n\n\t/**\n\t * Return a random number from min to max\n\t * @param {number} min Minimum number\n\t * @param {number} max Maximum number\n\t * @param {function(number):number=} opt_fn Easing function (optional)\n\t * @return {number} A random number\n\t */\n\trandom(min: number, max: number, opt_fn: ((arg0: any) => number) | undefined): number {\n\t\tif (opt_fn === undefined) {\n\t\t\treturn this.r() * (max - min) + min;\n\t\t}\n\t\treturn opt_fn(this.r()) * (max - min) + min;\n\t}\n\n\t/**\n\t * Returns a random number from 0 to n_min or from min to max\n\t * @param {number} n_min An integer or a minimum integer\n\t * @param {number=} opt_max Maximum integer\n\t * @return {number} A random integer\n\t */\n\trand(n_min: number, opt_max: number | null = null): number {\n\t\tif (null === opt_max) {\n\t\t\treturn Math.floor(this.r() * (n_min + 1));\n\t\t}\n\t\treturn Math.floor(this.r() * (opt_max + 1 - n_min) + n_min);\n\t}\n\n\t/**\n\t * Occur with probability specified in percent\n\t * @param {number} percent Percent\n\t * @return {boolean} Whether it occurs\n\t */\n\tlikely(percent: number): boolean {\n\t\treturn Math.floor(this.r() * (100 + 1)) <= percent;\n\t}\n\n}\n\n/**\n * Deterministic Dice\n * @author Takuto Yanagida\n * @version 2024-08-23\n */\nexport class DeterministicDice extends Dice {\n\n\tprivate seed: number;\n\tprivate stack: number[] = [];\n\tprivate generator: Xorshift32;\n\n\t/**\n\t * Make a dice\n\t */\n\tconstructor(seed = Math.random()) {\n\t\tsuper();\n\t\tthis.seed = 0 | (seed * (seed < 1 ? 1000 : 1));\n\t\tthis.generator = new Xorshift32(this.seed);\n\t\tthis.r = () => this.generator.random();\n\t}\n\n\t/**\n\t * Reset\n\t */\n\treset() {\n\t\tthis.generator = new Xorshift32(this.seed);\n\t\tthis.r = () => this.generator.random();\n\t}\n\n\t/**\n\t * Save the current state\n\t */\n\tsave() {\n\t\tthis.stack.push(this.generator.seed());\n\t}\n\n\t/**\n\t * Restore the previous state\n\t */\n\trestore() {\n\t\tconst seed = this.stack.pop() as number;\n\t\tthis.generator = new Xorshift32(seed);\n\t\tthis.r = () => this.generator.random();\n\t}\n\n}\n\nclass Xorshift32 {\n\n\tprivate y: number;\n\n\tconstructor(seed: number) {\n\t\tthis.y = seed;\n\t}\n\n\tseed(): number {\n\t\treturn this.y;\n\t}\n\n\trandom(): number {\n\t\tlet y = this.y;\n\t\ty = y ^ (y << 13);\n\t\ty = y ^ (y >> 17);\n\t\ty = y ^ (y << 15);\n\t\tthis.y = y;\n\t\treturn (y + 2147483648) / 4294967295;\n\t}\n\n}\n", "/**\n * Pattern Generator\n *\n * @author Takuto Yanagida\n * @version 2024-08-24\n */\n\nimport { hash } from './src/hash';\nimport { Dice, DeterministicDice } from './src/dice';\n\nexport function drawRandomly(ctx: CanvasRenderingContext2D, str: string, divX: number = 3, divY: number = 3) {\n\tconst d = new DeterministicDice(hash(str));\n\n\tconst w = ctx.canvas.width;\n\tconst h = ctx.canvas.height;\n\n\tconst cw = w / divX;\n\tconst ch = h / divY;\n\n\tdrawCellsRandomly(d, ctx, cw, ch);\n}\n\nexport function drawRegularly(ctx: CanvasRenderingContext2D, str: string, divX: number = 3, divY: number = 3) {\n\tconst d = new DeterministicDice(hash(str));\n\n\tconst w = ctx.canvas.width;\n\tconst h = ctx.canvas.height;\n\n\tconst cw = w / divX;\n\tconst ch = h / divY;\n\n\tdrawCellsRegularly(d, ctx, cw, ch, w, h);\n}\n\n\n// -----------------------------------------------------------------------------\n\n\nconst colorPairs = [\n\t['RoyalBlue', 'Pink'],\n\t['DarkSalmon', 'MidnightBlue'],\n\t['RoyalBlue', 'MidnightBlue'],\n\t['DarkSalmon', 'Pink'],\n];\n\nexport const colorPairSize = colorPairs.length;\n\nconst shapeTypes = [\n\t(ctx: CanvasRenderingContext2D) => {\n\t\tctx.beginPath();\n\t\tctx.arc(-5, -5, 10, 0, Math.PI / 2);\n\t\tctx.lineTo(-5, -5);\n\t\tctx.closePath();\n\t},\n\t(ctx: CanvasRenderingContext2D) => {\n\t\tctx.beginPath();\n\t\tctx.arc(-5, -5, 5, 0, Math.PI / 2);\n\t\tctx.lineTo(-5, -5);\n\t\tctx.closePath();\n\t},\n\t(ctx: CanvasRenderingContext2D) => {\n\t\tctx.beginPath();\n\t\tctx.arc(-5, 0, 5, -Math.PI / 2, Math.PI / 2);\n\t\tctx.closePath();\n\t},\n\t(ctx: CanvasRenderingContext2D) => {\n\t\tctx.beginPath();\n\t\tctx.rect(-5, -5, 5, 10);\n\t},\n\t(ctx: CanvasRenderingContext2D) => {\n\t\tctx.beginPath();\n\t\tctx.moveTo(-5, -5);\n\t\tctx.lineTo(-2.5, -5);\n\t\tctx.arc(-2.5, -2.5, 2.5, -Math.PI / 2, Math.PI / 2);\n\t\tctx.lineTo(-5, 0);\n\t\tctx.closePath();\n\t},\n\t(ctx: CanvasRenderingContext2D) => {\n\t\tctx.beginPath();\n\t\tctx.moveTo(-5, -5);\n\t\tctx.lineTo(5, -5);\n\t\tctx.lineTo(-5, 5);\n\t\tctx.closePath();\n\t},\n];\n\nexport const shapeTypeSize = shapeTypes.length;\n\nexport function drawCellsRegularly(d: Dice, ctx: CanvasRenderingContext2D, cw: number, ch: number, w: number, h: number) {\n\tconst cwo = cw / 2;\n\tconst cho = ch / 2;\n\n\tconst rs = [d.rand(3), d.rand(3)];\n\tconst sts = [d.rand(shapeTypeSize - 1), d.rand(shapeTypeSize - 1), d.rand(shapeTypeSize - 1)];\n\tconst cps = [d.rand(colorPairSize - 1), d.rand(colorPairSize - 1), d.rand(colorPairSize - 1)];\n\n\tctx.save();\n\tfor (let n = 0; n < 4; n += 1) {\n\t\tctx.save();\n\t\tctx.translate(cwo, cho);\n\t\tctx.scale(cw / 10, ch / 10);\n\t\tdrawCell(ctx, rs[0], sts[0], cps[0]);\n\t\tctx.restore();\n\n\t\tctx.save();\n\t\tctx.translate(cwo, cho + ch);\n\t\tctx.scale(cw / 10, ch / 10);\n\t\tdrawCell(ctx, rs[1], sts[1], cps[1]);\n\t\tctx.restore();\n\n\t\tctx.translate(w, h);\n\t\tctx.rotate(Math.PI);\n\n\t\tctx.rotate(Math.PI / 2);\n\t\tctx.translate(0, -h);\n\t}\n\tctx.restore();\n\tctx.translate(w / 2, h / 2);\n\tctx.scale(cw / 10, ch / 10);\n\tdrawCell(ctx, rs[2], sts[2], cps[2]);\n}\n\nexport function drawCellsRandomly(d: Dice, ctx: CanvasRenderingContext2D, cw: number, ch: number) {\n\tconst cwo = cw / 2;\n\tconst cho = ch / 2;\n\n\tfor (let t = 0; t < 3; t += 1) {\n\t\tfor (let s = 0; s < 3; s += 1) {\n\t\t\tctx.save();\n\t\t\tctx.translate(cwo + cw * s, cho + ch * t);\n\t\t\tctx.scale(cw / 10, ch / 10);\n\n\t\t\tconst r = d.rand(3);\n\t\t\tconst st = d.rand(shapeTypeSize - 1);\n\t\t\tconst cp = d.rand(colorPairSize - 1);\n\n\t\t\tdrawCell(ctx, r, st, cp);\n\t\t\tctx.restore();\n\t\t}\n\t}\n}\n\nfunction drawCell(ctx:CanvasRenderingContext2D, rot: number, type: number, color: number) {\n\tctx.save();\n\n\tctx.fillStyle = colorPairs[color][0];\n\tctx.fillRect(-5, -5, 10, 10);\n\n\tctx.fillStyle = colorPairs[color][1];\n\tctx.rotate(rot * Math.PI / 2);\n\tshapeTypes[type](ctx);\n\tctx.fill();\n\n\tctx.restore();\n}\n"],
  "mappings": "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",
  "names": ["hash", "str", "i", "Dice", "min", "max", "opt_fn", "n_min", "opt_max", "percent", "DeterministicDice", "seed", "Xorshift32", "y", "drawRandomly", "ctx", "str", "divX", "divY", "d", "DeterministicDice", "hash", "w", "h", "cw", "ch", "drawCellsRandomly", "drawRegularly", "drawCellsRegularly", "colorPairs", "colorPairSize", "shapeTypes", "shapeTypeSize", "cwo", "cho", "rs", "sts", "cps", "n", "drawCell", "s", "r", "st", "cp", "rot", "type", "color"]
}
