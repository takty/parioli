{
  "version": 3,
  "sources": ["../parioly.ts"],
  "sourcesContent": ["/**\n * Pattern Generator\n *\n * @author Takuto Yanagida\n * @version 2024-08-23\n */\n\nimport { Dice } from 'src/dice';\n\nconst colorPairs = [\n\t['RoyalBlue', 'Pink'],\n\t['DarkSalmon', 'MidnightBlue'],\n\t['RoyalBlue', 'MidnightBlue'],\n\t['DarkSalmon', 'Pink'],\n];\n\nexport const colorPairSize = colorPairs.length;\n\nconst shapeTypes = [\n\t(ctx: CanvasRenderingContext2D) => {\n\t\tctx.beginPath();\n\t\tctx.arc(-5, -5, 10, 0, Math.PI / 2);\n\t\tctx.lineTo(-5, -5);\n\t\tctx.closePath();\n\t},\n\t(ctx: CanvasRenderingContext2D) => {\n\t\tctx.beginPath();\n\t\tctx.arc(-5, -5, 5, 0, Math.PI / 2);\n\t\tctx.lineTo(-5, -5);\n\t\tctx.closePath();\n\t},\n\t(ctx: CanvasRenderingContext2D) => {\n\t\tctx.beginPath();\n\t\tctx.arc(-5, 0, 5, -Math.PI / 2, Math.PI / 2);\n\t\tctx.closePath();\n\t},\n\t(ctx: CanvasRenderingContext2D) => {\n\t\tctx.beginPath();\n\t\tctx.rect(-5, -5, 5, 10);\n\t},\n\t(ctx: CanvasRenderingContext2D) => {\n\t\tctx.beginPath();\n\t\tctx.moveTo(-5, -5);\n\t\tctx.lineTo(-2.5, -5);\n\t\tctx.arc(-2.5, -2.5, 2.5, -Math.PI / 2, Math.PI / 2);\n\t\tctx.lineTo(-5, 0);\n\t\tctx.closePath();\n\t},\n\t(ctx: CanvasRenderingContext2D) => {\n\t\tctx.beginPath();\n\t\tctx.moveTo(-5, -5);\n\t\tctx.lineTo(5, -5);\n\t\tctx.lineTo(-5, 5);\n\t\tctx.closePath();\n\t},\n];\n\nexport const shapeTypeSize = shapeTypes.length;\n\nexport function drawRotCells(d: Dice, ctx: CanvasRenderingContext2D, cwo: number, cho: number, cw: number, ch: number, w: number, h: number) {\n\tconst rs = [d.rand(3), d.rand(3)];\n\tconst sts = [d.rand(shapeTypeSize - 1), d.rand(shapeTypeSize - 1), d.rand(shapeTypeSize - 1)];\n\tconst cps = [d.rand(colorPairSize - 1), d.rand(colorPairSize - 1), d.rand(colorPairSize - 1)];\n\n\tctx.save();\n\tfor (let n = 0; n < 4; n += 1) {\n\t\tctx.save();\n\t\tctx.translate(cwo, cho);\n\t\tctx.scale(cw / 10, ch / 10);\n\t\tdrawCell(ctx, rs[0], sts[0], cps[0]);\n\t\tctx.restore();\n\n\t\tctx.save();\n\t\tctx.translate(cwo, cho + ch);\n\t\tctx.scale(cw / 10, ch / 10);\n\t\tdrawCell(ctx, rs[1], sts[1], cps[1]);\n\t\tctx.restore();\n\n\t\tctx.translate(w, h);\n\t\tctx.rotate(Math.PI);\n\n\t\tctx.rotate(Math.PI / 2);\n\t\tctx.translate(0, -h);\n\t}\n\tctx.restore();\n\tctx.translate(w / 2, h / 2);\n\tctx.scale(cw / 10, ch / 10);\n\tdrawCell(ctx, rs[2], sts[2], cps[2]);\n}\n\nexport function drawRandomCells(d: Dice, ctx: CanvasRenderingContext2D, cwo: number, cw: number, cho: number, ch: number) {\n\tfor (let t = 0; t < 3; t += 1) {\n\t\tfor (let s = 0; s < 3; s += 1) {\n\t\t\tctx.save();\n\t\t\tctx.translate(cwo + cw * s, cho + ch * t);\n\t\t\tctx.scale(cw / 10, ch / 10);\n\n\t\t\tconst r = d.rand(3);\n\t\t\tconst st = d.rand(shapeTypeSize - 1);\n\t\t\tconst cp = d.rand(colorPairSize - 1);\n\n\t\t\tdrawCell(ctx, r, st, cp);\n\t\t\tctx.restore();\n\t\t}\n\t}\n}\n\nfunction drawCell(ctx:CanvasRenderingContext2D, rot: number, type: number, color: number) {\n\tctx.save();\n\n\tctx.fillStyle = colorPairs[color][0];\n\tctx.fillRect(-5, -5, 10, 10);\n\n\tctx.fillStyle = colorPairs[color][1];\n\tctx.rotate(rot * Math.PI / 2);\n\tshapeTypes[type](ctx);\n\tctx.fill();\n\n\tctx.restore();\n}\n"],
  "mappings": "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",
  "names": ["colorPairs", "colorPairSize", "shapeTypes", "ctx", "shapeTypeSize", "drawRotCells", "d", "cwo", "cho", "cw", "ch", "w", "h", "rs", "sts", "cps", "n", "drawCell", "drawRandomCells", "t", "s", "r", "st", "cp", "rot", "type", "color"]
}
